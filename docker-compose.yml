version: '3.8'

services:
  # PostgreSQL Database for Flight Management
  postgres:
    image: postgres:15-alpine
    container_name: flight-postgres
    environment:
      POSTGRES_DB: flight_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./flight-management-service/src/main/resources/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d flight_management"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and seat blocking
  redis:
    image: redis:7-alpine
    container_name: flight-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for search engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: flight-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: flight-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: flight-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Topic Initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "
      echo 'Creating Kafka topics...'
      
      # Create seat-updates topic
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic seat-updates --partitions 3 --replication-factor 1
      
      # Create booking-events topic
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic booking-events --partitions 3 --replication-factor 1
      
      # Create flight-events topic  
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic flight-events --partitions 3 --replication-factor 1
      
      # List all topics to verify
      echo 'Topics created successfully:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    restart: "no"

  # Database Migrations Service (ONE-SHOT)
  database-migrations:
    build:
      context: .
      dockerfile: database-migrations/Dockerfile
    container_name: database-migrations
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATASOURCE_URL=r2dbc:postgresql://postgres:5432/flight_management
      - LIQUIBASE_DATASOURCE_URL=jdbc:postgresql://postgres:5432/flight_management
      - DATASOURCE_USERNAME=postgres
      - DATASOURCE_PASSWORD=admin
      - ELASTICSEARCH_URIS=http://elasticsearch:9200
      - MIGRATION_POSTGRESQL_ENABLED=true
      - MIGRATION_ELASTICSEARCH_ENABLED=true
      - MIGRATION_ELASTICSEARCH_RECREATE_INDICES=false
    restart: "no"

  # Flight Management Service
  flight-management-service:
    build:
      context: .
      dockerfile: flight-management-service/Dockerfile
    container_name: flight-management-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      database-migrations:
        condition: service_completed_successfully
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/flight_management
      - SPRING_R2DBC_USERNAME=postgres
      - SPRING_R2DBC_PASSWORD=admin
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/flight-management-service/ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Search Engine Service
  search-engine-service:
    build:
      context: .
      dockerfile: search-engine-service/Dockerfile
    container_name: search-engine-service
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      database-migrations:
        condition: service_completed_successfully
      flight-management-service:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVICES_FLIGHT_MANAGEMENT_URL=http://flight-management-service:8081/flight-management-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/search-engine-service/ping"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s

  # Booking Service
  booking-service:
    build:
      context: .
      dockerfile: booking-service/Dockerfile
    container_name: booking-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      database-migrations:
        condition: service_completed_successfully
      kafka-init:
        condition: service_completed_successfully
      flight-management-service:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/flight_management
      - SPRING_R2DBC_USERNAME=postgres
      - SPRING_R2DBC_PASSWORD=admin
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVICES_FLIGHT_MANAGEMENT_URL=http://flight-management-service:8081/flight-management-service
      - SPRING_FLYWAY_ENABLED=false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/booking-service/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  zookeeper_data:
  kafka_data:

networks:
  default:
    name: flight-booking-network
